% Segmentacion k means, sin reagrupamiento
% close all
% clear
%% Select Image
Filter={'*.jpg;*.jpeg;*.png;*.tif'};
[FileName, FilePath]=uigetfile(Filter);
pause(0.01);
if FileName == 0
    return;
end
FullFileName=[FilePath FileName];
%% Number of Desired Colors, value of k
ANSWER = inputdlg('Number of desired colors for k means:','k means',1,{'16'});
k = str2double(ANSWER{1});
%% Load Image Data
originalImage = imread(strcat(FullFileName));
filtImage = imfilter(originalImage,fspecial('average',3));
%imageLab = rgb2lab(filtImage);
[h, w, p] = size(originalImage);
%% Get patterns of the image 
imagePatterns = getPatterns(originalImage);
initialCentroids = centinit(k, imagePatterns);
%% Clustering of colors using k means
[ClasesKmeans, CentroidsKmeans, ~, ~] = kmeans(double(imagePatterns'),...
k,'MaxIter',1000,'Distance', 'city','EmptyAction','singleton');
%% reconstruction of the image
IC = getPixeles(h, w, centroidClass(ClasesKmeans, CentroidsKmeans));

%% perimeters
perimeters = imperim(IC, uint8(CentroidsKmeans), k);
imageRounded = originalImage;
for i=1:k,
    segmentos = imoverlay(imageRounded, perimeters(:, :, i), [.3 1 .3]);
end
%% return to RGB
% IC = double(IC);
% IC = lab2rgb(IC);
%% Show Results 
figure, imshow(segmentos); 
y = double(im2uint8(IC));
figure;
subplot(1,2,1);
imshow(originalImage);
title([FileName ' Original Image']);
subplot(1,2,2);
imshow(IC); 
title(['Segmentation with k means k = ' num2str(k) ', without reclustering']);
x = double (originalImage);
sample = zeros(size(x,1),size(x,2));
sample(1:3:end,1:3:end) = 1;
R = x(:,:,1); Rx = R(sample==1); Rn = randn( numel(Rx),1 )/3;
% G = x(:,:,2); Gx = G(sample==1); Gn = randn( numel(Rx),1 )/3;
% B = x(:,:,3); Bx = B(sample==1); Bn = randn( numel(Rx),1 )/3;       
figure, 
imshow(uint8(x))

figure, 
imshow(IC);